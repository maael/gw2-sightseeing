generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ChallengeCompletionSteps {
  completedAt DateTime @db.Date
  id          String   @db.ObjectId
}

type ChallengeSteps {
  description String
  id          String                 @db.ObjectId
  image       String
  location    ChallengeStepsLocation
  name        String
  precision   BigInt
}

type ChallengeStepsLocation {
  x Float
  y Float
  z Float
}

type UserAccountData {
  access     String[]
  characters UserAccountDataCharacters[]
  guilds     UserAccountDataGuilds[]
  name       String
}

type UserAccountDataCharacters {
  age        BigInt
  class      String
  gender     String
  guild      String
  name       String
  profession String
  race       String
  world      UserAccountDataCharactersWorld
}

type UserAccountDataCharactersWorld {
  id     String
  name   String
  region String
}

type UserAccountDataGuilds {
  id   String
  name String
  tag  String
}

type UserSettings {
  mode String
}

model Challenge {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  authorId    String           @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])
  createdAt   DateTime         @db.Date
  description String
  image       String
  likes       Int @default(0)
  masteries   String[]
  mounts      String[]
  name        String
  state       String @default("draft")
  steps       ChallengeSteps[]
  updatedAt   DateTime         @db.Date
  likeItems       ChallengeLikes[]
  completions ChallengeCompletion[]
}

model ChallengeCompletion {
  id          String                     @id @default(auto()) @map("_id") @db.ObjectId
  challengeId String                     @db.ObjectId
  challenge   Challenge   @relation(fields: [challengeId], references: [id])
  steps       ChallengeCompletionSteps[]
  userId      String                     @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([challengeId, userId], map: "ChallengeIdUserId")
}

model ChallengeLikes {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  challengeId String @db.ObjectId
  challenge   Challenge   @relation(fields: [challengeId], references: [id])
  userId      String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([challengeId, userId], map: "ChallengeIdUserId")
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  accountData      UserAccountData
  apiKey           String
  createdAt        DateTime        @db.Date
  gw2Id            String          @unique(map: "gw2Id")
  gw2Name          String
  primaryCharacter BigInt
  role             String @default("user")
  settings         UserSettings
  status           String @default("active")
  updatedAt        DateTime        @db.Date
  likes            ChallengeLikes[]
  challenges       Challenge[]
  challengeCompletion ChallengeCompletion[]
}
